name: Build - MFE Shell

on:
  push:
    branches: [ main ]
    paths:
      - 'projects/frontend-shell/**'
      - 'projects/frontend-lib/**'
      - 'package.json'
      - 'angular.json'
      - 'tsconfig.json'
  workflow_dispatch: # Para triggers manuais (ignora paths)
    inputs: # Opcional: Inputs personalizados para overrides
      environment: # Exemplo de input para overrides
        description: 'Ambiente para build (ex.: production)'
        required: false
        default: 'production'
        
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # Atualize para v4 para melhor resolução de paths em monorepos
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json
         
      - name: Clean install
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install
         
      - name: Build Frontend Lib
        run: npm run build frontend-lib
       
      - name: Build MFE
        run: npm run build frontend-shell -- --configuration production
       
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' # Somente em pushes reais
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # Use um access token do Docker Hub para segurança
         
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Habilita suporte a cache
      - name: Debug paths (ls)
        run: ls -la ./projects/frontend-shell  # Confirma existência do arquivo
      - name: Debug Dockerfile content (cat)
        run: cat ./projects/frontend-shell/Dockerfile || echo "Arquivo não encontrado ou vazio"  # Imprime o conteúdo nos logs
      - name: Debug with find (recursive search)
        run: find . -name Dockerfile -type f  # Busca recursiva para confirmar path no runner
      - name: Debug file head (first lines)
        run: head -n 10 ./projects/frontend-shell/Dockerfile || echo "Não foi possível ler o arquivo"  # Mostra primeiras linhas para ver se vazio
      
      - name: Fallback: Copy Dockerfile to root context
        run: cp ./projects/frontend-shell/Dockerfile ./Dockerfile  # Cópia para raiz como fallback para o Buildx
      
      - name: Debug after copy (ls root)
        run: ls -la .  # Confirma cópia na raiz
      
      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ahmentz/tcc-frontend # ex.: ahmentz/tcc-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            latest
           
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Context raiz do repo (para acessar dist/ de builds npm)
          file: ./Dockerfile  # Usa a cópia na raiz para evitar problemas de subdir no Buildx
          push: ${{ github.event_name != 'pull_request' }} # Push só em pushes/tags
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max # Cache de camadas Docker para eficiência
          build-args: | # Overrides opcionais para build-time (ex.: para env Angular)
            NODE_ENV=production
       
      - name: Scan image for vulnerabilities (Optional)
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.meta.outputs.tags }}'
          format: 'table'
          exit-code: '1' # Falha em problemas críticos
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
